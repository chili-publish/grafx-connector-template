{
    "id": "demo-connector",
    "version": "1.0.0",
    "name": "demo",
    "type": "media",
    "supportedAuth": [
      "none"
    ],
    "options": {
    },
    "script": "class DemoConnector {\r\n    constructor(runtime) {\r\n        this.runtime = runtime;\r\n    }\r\n    async query(options, context) {\r\n        return Promise.resolve({ pageSize: 3, data: [\r\n            { id: 'demo-1', name: 'Demo 1', relativePath: \"\/root\", metaData: {} },\r\n            { id: 'demo-2', name: 'Demo 2', relativePath: \"\/root\", metaData: {} },\r\n            { id: 'demo-3', name: 'Demo 3', relativePath: \"\/root\", metaData: {} },\r\n        ]});\r\n    }\r\n    async download(id, previewType, context) {\r\n        return (await this.runtime.fetch(`https:\/\/dummyimage.com\/600x400\/000\/fff&text=${id}`, {})).arrayBuffer;\r\n    }\r\n    upload(name, blob) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    remove(id) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    copy(id, newName) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getQueryOptions() {\r\n        return [];\r\n    }\r\n    getDownloadOptions() {\r\n        return [];\r\n    }\r\n    getCapabilities() {\r\n        return {\r\n            copy: false,\r\n            filtering: false,\r\n            query: true,\r\n            remove: false,\r\n            upload: false\r\n        };\r\n    }\r\n}"
  }